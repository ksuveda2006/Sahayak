import React, { useState, useCallback } from 'react';
import { ArrowLeft, Camera, Upload, Download, Save, Eye, Trash2 } from 'lucide-react';
import { Link } from 'react-router-dom';
import { useDropzone } from 'react-dropzone';
import toast from 'react-hot-toast';

const ImageAnalyzerPage = () => {
  const [formData, setFormData] = useState({
    subject: '',
    grade: '',
    language: 'English'
  });
  const [uploadedImage, setUploadedImage] = useState(null);
  const [imagePreview, setImagePreview] = useState('');
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [analysis, setAnalysis] = useState(null);

  const subjects = ['Mathematics', 'Science', 'English', 'Hindi', 'Social Studies', 'Environmental Studies', 'Art', 'General'];
  const grades = ['Grade 1', 'Grade 2', 'Grade 3', 'Grade 4', 'Grade 5', 'Grade 6', 'Grade 7', 'Grade 8'];
  const languages = ['English', 'Hindi', 'Bengali', 'Telugu', 'Marathi', 'Tamil', 'Gujarati', 'Urdu', 'Kannada', 'Odia', 'Malayalam', 'Punjabi', 'Assamese', 'Maithili', 'Sanskrit'];

  const onDrop = useCallback((acceptedFiles) => {
    const file = acceptedFiles[0];
    if (file) {
      setUploadedImage(file);
      const reader = new FileReader();
      reader.onload = () => {
        setImagePreview(reader.result);
      };
      reader.readAsDataURL(file);
      toast.success('Image uploaded successfully!');
    }
  }, []);

  const { getRootProps, getInputProps, isDragActive } = useDropzone({
    onDrop,
    accept: {
      'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.bmp', '.webp']
    },
    multiple: false,
    maxSize: 10 * 1024 * 1024 // 10MB
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const analyzeImage = async () => {
    if (!uploadedImage) {
      toast.error('Please upload an image first');
      return;
    }

    setIsAnalyzing(true);
    try {
      // Convert image to base64
      const reader = new FileReader();
      reader.onload = async () => {
        const base64Image = reader.result.split(',')[1];
        
        const response = await fetch('/api/analyze-image', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            subject: formData.subject || 'General',
            grade: formData.grade || 'Grade 5',
            language: formData.language,
            imageData: base64Image,
            userId: 'demo-user'
          }),
        });

        const data = await response.json();
        
        if (data.success) {
          setAnalysis(data.analysis);
          toast.success('Image analysis completed!');
        } else {
          toast.error('Failed to analyze image');
        }
      };
      reader.readAsDataURL(uploadedImage);
    } catch (error) {
      console.error('Error analyzing image:', error);
      toast.error('Error analyzing image');
    } finally {
      setIsAnalyzing(false);
    }
  };

  const saveAnalysis = () => {
    if (analysis) {
      toast.success('Analysis saved to your library!');
    }
  };

  const downloadReport = () => {
    if (analysis) {
      const report = `Image Analysis Report
      
Subject: ${formData.subject || 'General'}
Grade: ${formData.grade || 'Grade 5'}
Language: ${formData.language}

ANALYSIS RESULTS:
================

Description: ${analysis.description}

Educational Concepts:
${analysis.educationalConcepts.map(concept => `- ${concept}`).join('\n')}

Lesson Plan: ${analysis.lessonPlan.title}
Duration: ${analysis.lessonPlan.duration}

Objectives:
${analysis.lessonPlan.objectives.map(obj => `- ${obj}`).join('\n')}

Activities:
${analysis.lessonPlan.activities.map(activity => `- ${activity}`).join('\n')}

Discussion Questions:
${analysis.discussionQuestions.map(question => `- ${question}`).join('\n')}

Cross-Curricular Connections:
${analysis.crossCurricular.map(conn => `- ${conn.subject}: ${conn.activity}`).join('\n')}

Assessment Ideas:
${analysis.assessmentIdeas.map(idea => `- ${idea}`).join('\n')}

Cultural Connections:
${analysis.culturalConnections.map(connection => `- ${connection}`).join('\n')}

Extension Activities:
${analysis.extensionActivities.map(activity => `- ${activity}`).join('\n')}

Generated by Sahayak AI Teaching Assistant
`;

      const blob = new Blob([report], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `image_analysis_${Date.now()}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      toast.success('Report downloaded!');
    }
  };

  const clearImage = () => {
    setUploadedImage(null);
    setImagePreview('');
    setAnalysis(null);
    toast.success('Image cleared');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-cyan-50 via-blue-50 to-indigo-50">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex items-center justify-between h-16">
            <div className="flex items-center space-x-4">
              <Link to="/dashboard" className="flex items-center text-gray-600 hover:text-cyan-600 transition-colors">
                <ArrowLeft className="h-5 w-5 mr-2" />
                Back to Dashboard
              </Link>
              <div className="h-6 w-px bg-gray-300"></div>
              <div className="flex items-center space-x-2">
                <Camera className="h-6 w-6 text-cyan-600" />
                <h1 className="text-xl font-semibold text-gray-900">Image Analyzer</h1>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Upload and Settings */}
          <div className="space-y-6">
            {/* Context Settings */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">Analysis Context</h2>
              
              <div className="space-y-4">
                {/* Subject Selection */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Subject (Optional)
                  </label>
                  <select
                    name="subject"
                    value={formData.subject}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                  >
                    <option value="">Select Subject</option>
                    {subjects.map(subject => (
                      <option key={subject} value={subject}>{subject}</option>
                    ))}
                  </select>
                </div>

                {/* Grade Selection */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Grade Level (Optional)
                  </label>
                  <select
                    name="grade"
                    value={formData.grade}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                  >
                    <option value="">Select Grade</option>
                    {grades.map(grade => (
                      <option key={grade} value={grade}>{grade}</option>
                    ))}
                  </select>
                </div>

                {/* Language Selection */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Language
                  </label>
                  <select
                    name="language"
                    value={formData.language}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                  >
                    {languages.map(language => (
                      <option key={language} value={language}>{language}</option>
                    ))}
                  </select>
                </div>
              </div>
            </div>

            {/* Image Upload */}
            <div className="bg-white rounded-xl shadow-lg p-6">
              <h3 className="text-xl font-bold text-gray-900 mb-6">Upload Image</h3>
              
              {!imagePreview ? (
                <div
                  {...getRootProps()}
                  className={`border-2 border-dashed rounded-lg p-8 text-center cursor-pointer transition-colors ${
                    isDragActive 
                      ? 'border-cyan-500 bg-cyan-50' 
                      : 'border-gray-300 hover:border-cyan-400 hover:bg-gray-50'
                  }`}
                >
                  <input {...getInputProps()} />
                  <Upload className="h-12 w-12 text-gray-400 mx-auto mb-4" />
                  {isDragActive ? (
                    <p className="text-cyan-600">Drop the image here...</p>
                  ) : (
                    <div>
                      <p className="text-gray-600 mb-2">Drag & drop an image here, or click to select</p>
                      <p className="text-sm text-gray-500">Supports JPG, PNG, GIF, BMP, WebP (max 10MB)</p>
                    </div>
                  )}
                </div>
              ) : (
                <div className="space-y-4">
                  <div className="relative">
                    <img
                      src={imagePreview}
                      alt="Uploaded"
                      className="w-full h-64 object-contain bg-gray-50 rounded-lg"
                    />
                    <button
                      onClick={clearImage}
                      className="absolute top-2 right-2 p-2 bg-red-500 text-white rounded-full hover:bg-red-600 transition-colors"
                    >
                      <Trash2 className="h-4 w-4" />
                    </button>
                  </div>
                  
                  <button
                    onClick={analyzeImage}
                    disabled={isAnalyzing}
                    className="w-full bg-gradient-to-r from-cyan-600 to-blue-600 text-white py-3 px-6 rounded-lg font-semibold hover:from-cyan-700 hover:to-blue-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isAnalyzing ? (
                      <div className="flex items-center justify-center">
                        <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>
                        Analyzing Image...
                      </div>
                    ) : (
                      'Analyze Image'
                    )}
                  </button>
                </div>
              )}
            </div>
          </div>

          {/* Analysis Results */}
          <div className="bg-white rounded-xl shadow-lg p-6">
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-2xl font-bold text-gray-900">Analysis Results</h2>
              {analysis && (
                <div className="flex space-x-2">
                  <button
                    onClick={saveAnalysis}
                    className="flex items-center px-3 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors"
                  >
                    <Save className="h-4 w-4 mr-1" />
                    Save
                  </button>
                  <button
                    onClick={downloadReport}
                    className="flex items-center px-3 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                  >
                    <Download className="h-4 w-4 mr-1" />
                    Report
                  </button>
                </div>
              )}
            </div>

            {analysis ? (
              <div className="space-y-6 max-h-96 overflow-y-auto">
                {/* Description */}
                <div>
                  <h4 className="font-semibold text-gray-900 mb-2">Image Description</h4>
                  <div className="bg-gray-50 rounded-lg p-4">
                    <p className="text-gray-800">{analysis.description}</p>
                  </div>
                </div>

                {/* Educational Concepts */}
                <div>
                  <h4 className="font-semibold text-gray-900 mb-2">Educational Concepts</h4>
                  <div className="grid grid-cols-1 gap-2">
                    {analysis.educationalConcepts.map((concept, index) => (
                      <div key={index} className="bg-blue-50 rounded-lg p-3">
                        <span className="text-blue-800">{concept}</span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Lesson Plan */}
                <div>
                  <h4 className="font-semibold text-gray-900 mb-2">Suggested Lesson Plan</h4>
                  <div className="bg-green-50 rounded-lg p-4">
                    <h5 className="font-medium text-green-900 mb-2">{analysis.lessonPlan.title}</h5>
                    <p className="text-sm text-green-700 mb-3">Duration: {analysis.lessonPlan.duration}</p>
                    
                    <div className="space-y-2">
                      <div>
                        <span className="font-medium text-green-900">Objectives:</span>
                        <ul className="list-disc list-inside text-sm text-green-700 ml-2">
                          {analysis.lessonPlan.objectives.map((obj, index) => (
                            <li key={index}>{obj}</li>
                          ))}
                        </ul>
                      </div>
                      
                      <div>
                        <span className="font-medium text-green-900">Activities:</span>
                        <ul className="list-disc list-inside text-sm text-green-700 ml-2">
                          {analysis.lessonPlan.activities.map((activity, index) => (
                            <li key={index}>{activity}</li>
                          ))}
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>

                {/* Discussion Questions */}
                <div>
                  <h4 className="font-semibold text-gray-900 mb-2">Discussion Questions</h4>
                  <div className="space-y-2">
                    {analysis.discussionQuestions.map((question, index) => (
                      <div key={index} className="bg-purple-50 rounded-lg p-3">
                        <span className="text-purple-800">{question}</span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Cross-Curricular Connections */}
                <div>
                  <h4 className="font-semibold text-gray-900 mb-2">Cross-Curricular Connections</h4>
                  <div className="grid grid-cols-1 gap-2">
                    {analysis.crossCurricular.map((connection, index) => (
                      <div key={index} className="bg-orange-50 rounded-lg p-3">
                        <span className="font-medium text-orange-900">{connection.subject}:</span>
                        <span className="text-orange-700 ml-2">{connection.activity}</span>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Cultural Connections */}
                <div>
                  <h4 className="font-semibold text-gray-900 mb-2">Cultural Connections</h4>
                  <div className="space-y-2">
                    {analysis.culturalConnections.map((connection, index) => (
                      <div key={index} className="bg-yellow-50 rounded-lg p-3">
                        <span className="text-yellow-800">{connection}</span>
                      </div>
                    ))}
                  </div>
                </div>
              </div>
            ) : (
              <div className="flex flex-col items-center justify-center h-64 text-gray-500">
                <Camera className="h-16 w-16 mb-4 text-gray-300" />
                <p className="text-lg font-medium">No analysis results yet</p>
                <p className="text-sm">Upload an image and click "Analyze Image" to get started</p>
              </div>
            )}
          </div>
        </div>

        {/* Use Cases */}
        <div className="mt-8 bg-white rounded-xl shadow-lg p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">What Can You Analyze?</h3>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="bg-cyan-50 rounded-lg p-4">
              <h4 className="font-medium text-cyan-900 mb-2">Student Artwork</h4>
              <p className="text-sm text-cyan-700">Analyze drawings, paintings, and creative projects for educational insights</p>
            </div>
            <div className="bg-blue-50 rounded-lg p-4">
              <h4 className="font-medium text-blue-900 mb-2">Nature Photos</h4>
              <p className="text-sm text-blue-700">Identify plants, animals, and natural phenomena for science lessons</p>
            </div>
            <div className="bg-green-50 rounded-lg p-4">
              <h4 className="font-medium text-green-900 mb-2">Historical Images</h4>
              <p className="text-sm text-green-700">Extract historical context and create engaging social studies content</p>
            </div>
            <div className="bg-purple-50 rounded-lg p-4">
              <h4 className="font-medium text-purple-900 mb-2">Math Problems</h4>
              <p className="text-sm text-purple-700">Analyze mathematical diagrams, charts, and visual problems</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ImageAnalyzerPage;

