import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { 
  FileText, 
  Loader2, 
  Download, 
  Copy, 
  Share2, 
  BookOpen,
  Globe,
  Users,
  Clock
} from 'lucide-react';
import toast from 'react-hot-toast';

const ContentGenerator = ({ user }) => {
  const [formData, setFormData] = useState({
    subject: '',
    grade: '',
    language: '',
    topic: '',
    contentType: 'lesson_plan'
  });
  const [generatedContent, setGeneratedContent] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const subjects = [
    'Mathematics', 'Science', 'English', 'Hindi', 'Social Studies', 
    'Environmental Studies', 'Art & Craft', 'Physical Education'
  ];

  const grades = [
    'Grade 1', 'Grade 2', 'Grade 3', 'Grade 4', 'Grade 5',
    'Grade 6', 'Grade 7', 'Grade 8', 'Grade 9', 'Grade 10'
  ];

  const languages = [
    'English', 'Hindi', 'Bengali', 'Telugu', 'Marathi', 'Tamil',
    'Gujarati', 'Urdu', 'Kannada', 'Odia', 'Malayalam', 'Punjabi',
    'Assamese', 'Maithili', 'Sanskrit'
  ];

  const contentTypes = [
    { value: 'lesson_plan', label: 'Lesson Plan', description: 'Structured lesson with objectives and activities' },
    { value: 'story', label: 'Educational Story', description: 'Engaging story to teach concepts' },
    { value: 'explanation', label: 'Concept Explanation', description: 'Clear explanation of difficult topics' },
    { value: 'activity', label: 'Learning Activity', description: 'Interactive activity for students' },
    { value: 'quiz', label: 'Quiz Questions', description: 'Assessment questions with answers' }
  ];

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const generateContent = async () => {
    if (!formData.subject || !formData.grade || !formData.language || !formData.topic) {
      toast.error('Please fill in all required fields');
      return;
    }

    setIsLoading(true);
    try {
      // Simulate API call to backend
      await new Promise(resolve => setTimeout(resolve, 3000));
      
      // Mock generated content
      const mockContent = `# ${formData.contentType.replace('_', ' ').toUpperCase()}: ${formData.topic}

## Subject: ${formData.subject} | Grade: ${formData.grade} | Language: ${formData.language}

### Learning Objectives:
- Students will understand the basic concepts of ${formData.topic}
- Students will be able to apply knowledge in practical situations
- Students will develop critical thinking skills related to ${formData.topic}

### Materials Needed:
- Locally available materials (stones, sticks, leaves)
- Chalk and blackboard
- Student notebooks
- Simple household items

### Introduction (10 minutes):
Begin the lesson by asking students about their experiences with ${formData.topic}. Connect the topic to their daily lives and local environment.

### Main Activity (25 minutes):
1. **Explanation Phase**: Use simple language and local examples to explain ${formData.topic}
2. **Demonstration**: Show practical examples using available materials
3. **Student Participation**: Encourage students to ask questions and share observations
4. **Group Activity**: Divide students into small groups for hands-on learning

### Assessment:
- Observe student participation during activities
- Ask oral questions to check understanding
- Simple written exercise adapted to grade level

### Homework/Extension:
Students will observe ${formData.topic} in their home environment and share findings in the next class.

### Cultural Context:
This lesson incorporates local traditions and practices, making learning relevant to students' lives in rural communities.

### Differentiation for Multi-Grade Classroom:
- **Lower grades**: Focus on basic observation and simple concepts
- **Higher grades**: Include more complex analysis and problem-solving
- **Mixed activities**: Pair older students with younger ones for peer learning

### Resources for Teachers:
- Additional reading materials in ${formData.language}
- Simple experiments using household items
- Community resource persons who can share practical knowledge

---
*Generated by Sahayak AI Teaching Assistant*`;

      setGeneratedContent(mockContent);
      toast.success('Content generated successfully!');
    } catch (error) {
      toast.error('Failed to generate content. Please try again.');
      console.error('Content generation error:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const copyToClipboard = () => {
    navigator.clipboard.writeText(generatedContent);
    toast.success('Content copied to clipboard!');
  };

  const downloadContent = () => {
    const blob = new Blob([generatedContent], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${formData.topic}_${formData.subject}_${formData.grade}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    toast.success('Content downloaded!');
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center space-x-3 mb-4">
            <div className="w-12 h-12 bg-gradient-to-br from-blue-500 to-cyan-500 rounded-xl flex items-center justify-center">
              <FileText className="w-6 h-6 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">Content Generator</h1>
              <p className="text-gray-600">Create localized educational content for your classroom</p>
            </div>
          </div>
        </div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Form Section */}
          <div className="lg:col-span-1">
            <div className="bg-white rounded-2xl p-6 shadow-lg border border-gray-100 sticky top-8">
              <h2 className="text-xl font-bold text-gray-900 mb-6">Content Details</h2>
              
              <div className="space-y-6">
                {/* Subject */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Subject *
                  </label>
                  <select
                    name="subject"
                    value={formData.subject}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Select Subject</option>
                    {subjects.map(subject => (
                      <option key={subject} value={subject}>{subject}</option>
                    ))}
                  </select>
                </div>

                {/* Grade */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Grade Level *
                  </label>
                  <select
                    name="grade"
                    value={formData.grade}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Select Grade</option>
                    {grades.map(grade => (
                      <option key={grade} value={grade}>{grade}</option>
                    ))}
                  </select>
                </div>

                {/* Language */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Language *
                  </label>
                  <select
                    name="language"
                    value={formData.language}
                    onChange={handleInputChange}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="">Select Language</option>
                    {languages.map(language => (
                      <option key={language} value={language}>{language}</option>
                    ))}
                  </select>
                </div>

                {/* Topic */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Topic *
                  </label>
                  <input
                    type="text"
                    name="topic"
                    value={formData.topic}
                    onChange={handleInputChange}
                    placeholder="e.g., Fractions, Photosynthesis, Local History"
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                </div>

                {/* Content Type */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Content Type
                  </label>
                  <div className="space-y-2">
                    {contentTypes.map(type => (
                      <label key={type.value} className="flex items-start space-x-3 cursor-pointer">
                        <input
                          type="radio"
                          name="contentType"
                          value={type.value}
                          checked={formData.contentType === type.value}
                          onChange={handleInputChange}
                          className="mt-1 text-blue-600 focus:ring-blue-500"
                        />
                        <div>
                          <div className="font-medium text-gray-900">{type.label}</div>
                          <div className="text-sm text-gray-600">{type.description}</div>
                        </div>
                      </label>
                    ))}
                  </div>
                </div>

                {/* Generate Button */}
                <Button
                  onClick={generateContent}
                  disabled={isLoading}
                  className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white py-3"
                >
                  {isLoading ? (
                    <>
                      <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <FileText className="w-4 h-4 mr-2" />
                      Generate Content
                    </>
                  )}
                </Button>
              </div>
            </div>
          </div>

          {/* Content Display Section */}
          <div className="lg:col-span-2">
            {!generatedContent && !isLoading && (
              <div className="bg-white rounded-2xl p-8 shadow-lg border border-gray-100 text-center">
                <div className="w-24 h-24 bg-gradient-to-br from-blue-100 to-purple-100 rounded-full flex items-center justify-center mx-auto mb-6">
                  <FileText className="w-12 h-12 text-blue-600" />
                </div>
                <h3 className="text-xl font-bold text-gray-900 mb-4">Ready to Generate Content</h3>
                <p className="text-gray-600 mb-6">
                  Fill in the form on the left and click "Generate Content" to create 
                  localized educational materials for your classroom.
                </p>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                  <div className="flex items-center justify-center space-x-2 text-gray-600">
                    <Globe className="w-4 h-4" />
                    <span>15+ Languages</span>
                  </div>
                  <div className="flex items-center justify-center space-x-2 text-gray-600">
                    <Users className="w-4 h-4" />
                    <span>Multi-Grade</span>
                  </div>
                  <div className="flex items-center justify-center space-x-2 text-gray-600">
                    <BookOpen className="w-4 h-4" />
                    <span>All Subjects</span>
                  </div>
                  <div className="flex items-center justify-center space-x-2 text-gray-600">
                    <Clock className="w-4 h-4" />
                    <span>Instant</span>
                  </div>
                </div>
              </div>
            )}

            {isLoading && (
              <div className="bg-white rounded-2xl p-8 shadow-lg border border-gray-100 text-center">
                <div className="w-16 h-16 border-4 border-blue-200 border-t-blue-600 rounded-full animate-spin mx-auto mb-6"></div>
                <h3 className="text-xl font-bold text-gray-900 mb-4">Generating Your Content</h3>
                <p className="text-gray-600">
                  Our AI is creating personalized educational content for your classroom...
                </p>
              </div>
            )}

            {generatedContent && (
              <div className="bg-white rounded-2xl shadow-lg border border-gray-100">
                {/* Content Header */}
                <div className="p-6 border-b border-gray-200">
                  <div className="flex items-center justify-between">
                    <h3 className="text-xl font-bold text-gray-900">Generated Content</h3>
                    <div className="flex items-center space-x-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={copyToClipboard}
                        className="flex items-center space-x-1"
                      >
                        <Copy className="w-4 h-4" />
                        <span>Copy</span>
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={downloadContent}
                        className="flex items-center space-x-1"
                      >
                        <Download className="w-4 h-4" />
                        <span>Download</span>
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        className="flex items-center space-x-1"
                      >
                        <Share2 className="w-4 h-4" />
                        <span>Share</span>
                      </Button>
                    </div>
                  </div>
                </div>

                {/* Content Body */}
                <div className="p-6">
                  <div className="prose max-w-none">
                    <pre className="whitespace-pre-wrap font-sans text-gray-800 leading-relaxed">
                      {generatedContent}
                    </pre>
                  </div>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ContentGenerator;

